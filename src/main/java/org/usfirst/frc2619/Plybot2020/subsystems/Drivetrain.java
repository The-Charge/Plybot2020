// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Plybot2020.subsystems;


import org.usfirst.frc2619.Plybot2020.MathUtil;
import org.usfirst.frc2619.Plybot2020.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
//import com.kauailabs.navx.frc.AHRS;


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX rightFrontMotor;
    private WPI_TalonSRX rightRearMotor;
    private WPI_TalonSRX leftFrontMotor;
    private WPI_TalonSRX leftRearMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //PID Constants:
    private static final double SPEED_P_CONSTANT = 0; //for now
    private static final double SPEED_I_CONSTANT = 0; //for now
    private static final double SPEED_D_CONSTANT = 0; //for now
    private static final double SPEED_F_CONSTANT = 0; //for now
    private static final int TIMEOUT_MS = 10; //maximum processing time threshold
    private static final int MAX_TICKS_PER_SECOND = 6500;


    public Drivetrain() {
       
        rightFrontMotor = new WPI_TalonSRX(0);
        
        
        
        rightRearMotor = new WPI_TalonSRX(1);
        
        
        
        leftFrontMotor = new WPI_TalonSRX(15);
        
        
        
        leftRearMotor = new WPI_TalonSRX(14);
        
        
        

   

        //private static final AHRS ahrs = new AHRS(Port.kMXP);

        //Sets motors to coast mode neutral mode
        setNeutralMode();

        //inverts it so +1 on right motor == +1 on left motor
        rightFrontMotor.setInverted(true);
        rightRearMotor.setInverted(true);
        
        //Rear motors have the same properties as the fornt motors
        leftRearMotor.follow(leftFrontMotor);
        rightRearMotor.follow(rightFrontMotor);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new TankDrive());

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void run(double l, double r){
        double leftSpeed = l;
        double rightSpeed = r;

        /* 
        if (quarterspeed) {
            leftSpeed = 0.25 * l;
            rightSpeed = 0.25 * r;
        }
        */

        leftFrontMotor.set(leftSpeed);
        rightFrontMotor.set(rightSpeed);

        /** Other things we do here:
        drivelocked - to drive straight
        isReverse - forward on JS = backward on Robot
        */
    }

    public void stop(){
        leftFrontMotor.set(0);
        rightFrontMotor.set(0);
    }

    /**
     * SetPercentVBus - PercentOutput Mode -- Telling motor to run at fixed power
     * When its gets resistance (high friction) -- slow down
     * low resistance (low friction) -- speed up
     * 
     * Speed Control Mode -- Telling motor to run at fixed power
     * Would run at same speed no matter conditions.
     */
    public void setPercentVBus(){
        leftFrontMotor.set(ControlMode.PercentOutput, 0);
        rightFrontMotor.set(ControlMode.PercentOutput, 0);
    }

    //Coding the method used earlier in the constructor 
    public void setNeutralMode()
    {
        leftFrontMotor.setNeutralMode(NeutralMode.Coast);
        rightFrontMotor.setNeutralMode(NeutralMode.Coast);
        leftRearMotor.setNeutralMode(NeutralMode.Coast);
        rightRearMotor.setNeutralMode(NeutralMode.Coast);
    }



    //initializes the PID SpeedMode
    public void initSpeedMode()
    {
        leftFrontMotor.set(ControlMode.Velocity, 0);
        rightFrontMotor.set(ControlMode.Velocity, 0);

        //Assigned PID constants to the motors.
        leftFrontMotor.config_kP(1, SPEED_P_CONSTANT, TIMEOUT_MS);
        leftFrontMotor.config_kI(1, SPEED_I_CONSTANT, TIMEOUT_MS);
        leftFrontMotor.config_kD(1, SPEED_D_CONSTANT, TIMEOUT_MS);
        leftFrontMotor.config_kF(1, SPEED_F_CONSTANT, TIMEOUT_MS);

        rightFrontMotor.config_kP(1, SPEED_P_CONSTANT, TIMEOUT_MS);
        rightFrontMotor.config_kI(1, SPEED_I_CONSTANT, TIMEOUT_MS);
        rightFrontMotor.config_kD(1, SPEED_D_CONSTANT, TIMEOUT_MS);
        rightFrontMotor.config_kF(1, SPEED_F_CONSTANT, TIMEOUT_MS);

        //Don't know what this is yet...
        leftFrontMotor.selectProfileSlot(1, 0);
        rightFrontMotor.selectProfileSlot(1, 0);
    }

    public void setPercentSpeedPID (double setSpeed)
    {
        setSpeed = MathUtil.clamp(setSpeed, -1, 1);
        leftFrontMotor.set(ControlMode.Velocity, MAX_TICKS_PER_SECOND * setSpeed);
        rightFrontMotor.set(ControlMode.Velocity, MAX_TICKS_PER_SECOND * setSpeed);
    }

    public void setPercentSpeedPID (double setSpeedL, double setSpeedR)
    {
        setSpeedR = MathUtil.clamp(setSpeedR, -1, 1);
        setSpeedL = MathUtil.clamp(setSpeedL, -1, 1);
        leftFrontMotor.set(ControlMode.Velocity, MAX_TICKS_PER_SECOND * setSpeedL);
        rightFrontMotor.set(ControlMode.Velocity, MAX_TICKS_PER_SECOND * setSpeedR);
    }

    public void writeIndivPIDs (double outputl, double outputr)
    {
        leftFrontMotor.pidWrite(outputl);
        rightFrontMotor.pidWrite(outputr);

    }

}

