// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Plybot2020.subsystems;


import org.usfirst.frc2619.Plybot2020.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    //import com.kauailabs.navx.frc.AHRS;


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX rightFrontMotor;
    private WPI_TalonSRX rightRearMotor;
    private WPI_TalonSRX leftFrontMotor;
    private WPI_TalonSRX leftRearMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightFrontMotor = new WPI_TalonSRX(0);
        
        
        
        rightRearMotor = new WPI_TalonSRX(1);
        
        
        
        leftFrontMotor = new WPI_TalonSRX(15);
        
        
        
        leftRearMotor = new WPI_TalonSRX(14);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //private static final AHRS ahrs = new AHRS(Port.kMXP);

        //Sets motors to coast mode neutral mode
        setNeutralMode();

        //inverts it so +1 on right motor == +1 on left motor
        rightFrontMotor.setInverted(true);
        rightRearMotor.setInverted(true);
        
        //Rear motors have the same properties as the front motors
        leftRearMotor.follow(leftFrontMotor);
        rightRearMotor.follow(rightFrontMotor);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new TankDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void run(double l, double r)
    {
        double leftSpeed = l;
        double rightSpeed = r;

        /*
        if (quarterspeed)
        {
            leftSpeed = 0.25 * l;
            rightSpeed = 0.25* r;
        }
        */

        leftFrontMotor.set(leftSpeed);
        rightFrontMotor.set(rightSpeed);

        /*Other things we do here:
        drive locked - to drive straight
        is reverse - forward on JS = backward
        */
    }

    public void stop()
    {
        leftFrontMotor.set(0);
        rightFrontMotor.set(0);
    }

    //SetPercentVBus: PercentOutput Mode -> Telling motor to run at fixed dpower
    //When its gets resistance resistance (high friction) -> slowdown
    //Low resiostance ()low friction -> spee dup

    //Speed Control Mode -> Telling motor to run at fixe dpower
    //Would run at same speed no mater conditions
    public void setPercentVBus()
    {
        leftFrontMotor.set(ControlMode.PercentOutput, 0);
        rightFrontMotor.set(ControlMode.PercentOutput, 0);
    }

    //Coding the method used earlier in the constructor
    public void setNeutralMode()
    {
        leftFrontMotor.setNeutralMode(NeutralMode.Coast);
        rightFrontMotor.setNeutralMode(NeutralMode.Coast);
        leftRearMotor.setNeutralMode(NeutralMode.Coast);
        leftRearMotor.setNeutralMode(NeutralMode.Coast);
    }
}

